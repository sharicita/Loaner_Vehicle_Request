<?xml version="1.0" encoding="UTF-8"?><record_update table="sysauto_script">
    <sysauto_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <business_calendar/>
        <condition/>
        <conditional>false</conditional>
        <entered_time>1981-07-15 07:00:00</entered_time>
        <max_drift/>
        <name>Activate Next Experience</name>
        <offset/>
        <offset_type>0</offset_type>
        <run_as display_value="Shari LeMonnier">862767af835d9610b8bec7c6feaad36d</run_as>
        <run_as_tz/>
        <run_dayofmonth>1</run_dayofmonth>
        <run_dayofweek/>
        <run_period/>
        <run_start>1981-07-15 07:00:00</run_start>
        <run_time>1981-07-15 07:00:00</run_time>
        <run_type>once</run_type>
        <script><![CDATA[function activateNextExperience(isRollback) {      var rollback = isRollback;      var activating = !rollback;      var res = {          nextExperienceActivated: activating,      };      var unifiedAnalyticsProp = "com.glide.par.unified_analytics.enabled";      var rollbackAllowedProp = "glide.par.coreui.migration.bulk_rollback_enabled";      var unifiedEnabled = gs.getProperty(unifiedAnalyticsProp, "false");      var rollbackAllowed = gs.getProperty(rollbackAllowedProp, "false");      if ((unifiedEnabled === "true" && activating) || (unifiedEnabled === "false" && !activating)) {          res.skipped = true;          return res;      }      if (rollback && rollbackAllowed !== "true") {          return {              skipped: true,              nextExperienceActivated: true,              message: "Please don't rollback. You weren't meant to find this. Contact support first.",          };      }      var COMPONENT_BRIDGE = "par_coreui_migration_bridge_component";      var DASHBOARD_BRIDGE = "par_coreui_migration_bridge_dashboard";      var SCHEDULED_JOB_BRIDGE = "par_coreui_migration_bridge_sysauto";      var bridgingTables = [COMPONENT_BRIDGE, DASHBOARD_BRIDGE, SCHEDULED_JOB_BRIDGE];      var tablesInfo = {};      var isDomainSeparated = new SNC.PADomainUtils().isDomainSeparated();      tablesInfo[DASHBOARD_BRIDGE] = {          core: function() {              return {                  table: "pa_dashboards",                  bridgeField: "pa_dashboard",                  hasActive: true,              };          },          next: function() {              return {                  table: "par_dashboard",                  bridgeField: "par_dashboard",                  hasActive: true,              };          }      };      tablesInfo[COMPONENT_BRIDGE] = {          core: function(record) {              switch (record.getValue("type")) {                  case "report":                      return {                          table: "sys_report",                              bridgeField: "report",                              hasActive: true,                      };                  case "widget":                      return {                          table: "pa_widgets",                              bridgeField: "widget",                              hasActive: false,                      };                  case "filter":                      return {                          table: "sys_ui_hp_publisher",                              bridgeField: "filter",                              hasActive: false                      };                  default:                      throw new Error("Unexpected component type - " + record.getValue("type"));              }          },          next: function(record) {              return {                  table: "par_component",                  bridgeField: "component",                  hasActive: true,              };          },      };      tablesInfo[SCHEDULED_JOB_BRIDGE] = {          core: function() {              return {                  table: "sysauto_report",                  bridgeField: "sysauto_report",                  hasActive: true,              };          },          next: function() {              return {                  table: "sysauto_par",                  bridgeField: "sysauto_par",                  hasActive: true,              };          },      };      var direction;      if (activating)          direction = ["core", "next"];      else          direction = ["next", "core"];      var tableRecordsToBeUpdated = {};      function addTableInfo(tableName, activeValue) {          if (!tableRecordsToBeUpdated[tableName]) {              tableRecordsToBeUpdated[tableName] = {};              tableRecordsToBeUpdated[tableName].active = activeValue;              tableRecordsToBeUpdated[tableName].sysids = [];          }      }      function updateComponentRelatedRecords(tableRecordsToBeUpdated) {          for (var table in tableRecordsToBeUpdated) {              gs.info("running updateComponentRelatedRecords for table:" + table + " record count is:" + tableRecordsToBeUpdated[table].sysids.length);              if (tableRecordsToBeUpdated[table].sysids.length > 0) {                  var dbQuery = new GlideDBQuery(table);                  dbQuery.addQuery("sys_id", "IN", tableRecordsToBeUpdated[table].sysids);                  if (isDomainSeparated)                      dbQuery.setSuppressSeparation(true);                  var dbu = new GlideDBUpdate(table);                  dbu.setQuery(dbQuery);                  dbu.setValue("active", tableRecordsToBeUpdated[table].active);                  dbu.setMultiple(true);                  dbu.execute();                  delete tableRecordsToBeUpdated[table];              }          }      }      for (var i = 0; i < bridgingTables.length; i++) {          var bridgingTable = bridgingTables[i];          var gr = new GlideRecord(bridgingTable);          if (activating) {              gr.addEncodedQuery("active=");          } else {              gr.addEncodedQuery("active=next");          }          /** ^ active points at the "source of truth" for if the artifact has been MANUALLY set to COREUI or NEXT. */          /** If the bridging table says null, rollback/activation can transfer the active flag. */          /** If the active flag has been manually set to next/core, then the automated rollback/activation will skip over it. */          if (isDomainSeparated)              gr.queryNoDomain();          else              gr.query();          var tableInfo = tablesInfo[bridgingTable];          var counter = 0;          while (gr.next()) {              counter++;              var FROM_TABLE_INFO = tableInfo[direction[0]](gr);              var TO_TABLE_INFO = tableInfo[direction[1]](gr);				if(!FROM_TABLE_INFO || !TO_TABLE_INFO) {					gs.error("Failed to get correct to or from table for " + bridgingTable + ", skipping records to preserve data. From: " + FROM_TABLE_INFO + " To: " + TO_TABLE_INFO);					continue;				}	              var active = true;              var sysid = "";              if (FROM_TABLE_INFO.hasActive) {                  sysid = gr.getValue(FROM_TABLE_INFO.bridgeField);                  if (sysid != null) {                      addTableInfo(FROM_TABLE_INFO.table, false);                      tableRecordsToBeUpdated[FROM_TABLE_INFO.table].sysids.push(sysid);                  }              }              if (active && TO_TABLE_INFO.hasActive) {                  sysid = gr.getValue(TO_TABLE_INFO.bridgeField);                  if (sysid != null) {                      addTableInfo(TO_TABLE_INFO.table, true);                      tableRecordsToBeUpdated[TO_TABLE_INFO.table].sysids.push(sysid);                  }              }              /**  Do it in batches to avoid excessive memory usage */              if (counter == 500) {                  updateComponentRelatedRecords(tableRecordsToBeUpdated);                  counter = 0;              }          }          gs.info("updating " + bridgingTable + " table active field");          /** bulk update the bridging table */          var activeDirection = direction[1] === "core" ? "" : direction[1];          var dbQuery = new GlideDBQuery(bridgingTable);          var dbu = new GlideDBUpdate(bridgingTable);          if (activating) {              dbQuery.addQuery("active", "=", "NULL");          } else {              dbQuery.addQuery("active", "=", "next");          }          if (isDomainSeparated)              dbQuery.setSuppressSeparation(true);          dbu.setQuery(dbQuery);          dbu.setValue("active", activeDirection);          dbu.setMultiple(true);          dbu.execute();          updateComponentRelatedRecords(tableRecordsToBeUpdated);      }      gs.setProperty(unifiedAnalyticsProp, activating);  }activateNextExperience(undefined);]]></script>
        <sys_class_name>sysauto_script</sys_class_name>
        <sys_created_by>shari.lemonnier</sys_created_by>
        <sys_created_on>2024-12-05 20:31:15</sys_created_on>
        <sys_id>425969a1839a5210b8bec7c6feaad364</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Activate Next Experience</sys_name>
        <sys_package display_value="Loaner Vehicle Request and Inventory" source="x_1553691_lva">8b6ad87f8351d610b8bec7c6feaad38c</sys_package>
        <sys_policy/>
        <sys_scope display_value="Loaner Vehicle Request and Inventory">8b6ad87f8351d610b8bec7c6feaad38c</sys_scope>
        <sys_update_name>sysauto_script_425969a1839a5210b8bec7c6feaad364</sys_update_name>
        <sys_updated_by>shari.lemonnier</sys_updated_by>
        <sys_updated_on>2024-12-05 20:31:15</sys_updated_on>
        <time_zone/>
        <upgrade_safe>false</upgrade_safe>
    </sysauto_script>
</record_update>
